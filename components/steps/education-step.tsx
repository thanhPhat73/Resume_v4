"use client"

import { useFormContext, useFieldArray } from "react-hook-form"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Plus, Trash2, GraduationCap } from "lucide-react"
import { DragDropList } from "../drag-drop-list"
import type { ResumeData } from "../resume-builder"

export function EducationStep() {
  const { register, control, watch, setValue } = useFormContext<ResumeData>()
  const { fields, append, remove, move } = useFieldArray({
    control,
    name: "education",
  })

  const degreeOptions = [
    "Ti·∫øn sƒ© (Ph.D)",
    "Th·∫°c sƒ© (Master)",
    "C·ª≠ nh√¢n (Bachelor)",
    "K·ªπ s∆∞ (Engineer)",
    "Cao ƒë·∫≥ng (Associate)",
    "Trung c·∫•p (Diploma)",
    "Ch·ª©ng ch·ªâ (Certificate)",
    "Kh√°c",
  ]

  const majorOptions = [
    "C√¥ng ngh·ªá th√¥ng tin",
    "Khoa h·ªçc m√°y t√≠nh",
    "K·ªπ thu·∫≠t ph·∫ßn m·ªÅm",
    "H·ªá th·ªëng th√¥ng tin",
    "An ninh m·∫°ng",
    "Tr√≠ tu·ªá nh√¢n t·∫°o",
    "Khoa h·ªçc d·ªØ li·ªáu",
    "K·ªπ thu·∫≠t ƒëi·ªán t·ª≠",
    "K·ªπ thu·∫≠t c∆° kh√≠",
    "K·ªπ thu·∫≠t x√¢y d·ª±ng",
    "Kinh t·∫ø",
    "Qu·∫£n tr·ªã kinh doanh",
    "Marketing",
    "T√†i ch√≠nh - Ng√¢n h√†ng",
    "K·∫ø to√°n",
    "Lu·∫≠t",
    "Y h·ªçc",
    "D∆∞·ª£c h·ªçc",
    "Gi√°o d·ª•c",
    "Ng√¥n ng·ªØ Anh",
    "Thi·∫øt k·∫ø ƒë·ªì h·ªça",
    "Ki·∫øn tr√∫c",
    "Kh√°c",
  ]

  const addEducation = () => {
    append({
      id: Date.now().toString(),
      institution: "",
      degree: "",
      field: "",
      startDate: "",
      endDate: "",
      gpa: "",
    })
  }

  const handleReorder = (oldIndex: number, newIndex: number) => {
    move(oldIndex, newIndex)
  }

  const renderEducationItem = (field: any, index: number, isDragging?: boolean) => (
    <Card key={field.id} className={isDragging ? "shadow-lg" : ""}>
      <CardHeader>
        <div className="flex items-center justify-between">
          <CardTitle className="text-base">H·ªçc v·∫•n {index + 1}</CardTitle>
          <Button
            variant="outline"
            size="icon"
            onClick={() => remove(index)}
            className="text-destructive hover:text-destructive"
          >
            <Trash2 className="h-4 w-4" />
          </Button>
        </div>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="grid grid-cols-1 gap-4" style={{ gridTemplateColumns: "repeat(1, minmax(0, 1fr))" }}>
          <style jsx>{`
            @media (min-width: 768px) {
              .grid {
                grid-template-columns: repeat(2, minmax(0, 1fr));
              }
            }
          `}</style>
          <div className="space-y-2">
            <Label htmlFor={`institution-${index}`}>Tr∆∞·ªùng h·ªçc *</Label>
            <Input
              id={`institution-${index}`}
              {...register(`education.${index}.institution`, { required: true })}
              placeholder="T√™n tr∆∞·ªùng h·ªçc"
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor={`degree-${index}`}>B·∫±ng c·∫•p *</Label>
            <Select
              value={watch(`education.${index}.degree`)}
              onValueChange={(value) => setValue(`education.${index}.degree`, value)}
            >
              <SelectTrigger>
                <SelectValue placeholder="Ch·ªçn b·∫±ng c·∫•p" />
              </SelectTrigger>
              <SelectContent>
                {degreeOptions.map((degree) => (
                  <SelectItem key={degree} value={degree}>
                    {degree}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>

          <div className="space-y-2">
            <Label htmlFor={`field-${index}`}>Chuy√™n ng√†nh *</Label>
            <Select
              value={watch(`education.${index}.field`)}
              onValueChange={(value) => setValue(`education.${index}.field`, value)}
            >
              <SelectTrigger>
                <SelectValue placeholder="Ch·ªçn chuy√™n ng√†nh" />
              </SelectTrigger>
              <SelectContent>
                {majorOptions.map((major) => (
                  <SelectItem key={major} value={major}>
                    {major}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>

          <div className="space-y-2">
            <Label htmlFor={`gpa-${index}`}>GPA</Label>
            <Input id={`gpa-${index}`} {...register(`education.${index}.gpa`)} placeholder="3.5/4.0" />
          </div>

          <div className="space-y-2">
            <Label htmlFor={`startDate-${index}`}>Ng√†y b·∫Øt ƒë·∫ßu *</Label>
            <Input
              id={`startDate-${index}`}
              type="month"
              {...register(`education.${index}.startDate`, { required: true })}
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor={`endDate-${index}`}>Ng√†y t·ªët nghi·ªáp *</Label>
            <Input
              id={`endDate-${index}`}
              type="month"
              {...register(`education.${index}.endDate`, { required: true })}
            />
          </div>
        </div>
      </CardContent>
    </Card>
  )

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-2">
          <GraduationCap className="h-5 w-5" />
          <h3 className="text-lg font-semibold">H·ªçc v·∫•n</h3>
        </div>
        <Button onClick={addEducation} className="flex items-center gap-2">
          <Plus className="h-4 w-4" />
          Th√™m h·ªçc v·∫•n
        </Button>
      </div>

      {fields.length === 0 && (
        <Card>
          <CardContent className="pt-6">
            <div className="text-center py-8">
              <GraduationCap className="h-12 w-12 mx-auto text-muted-foreground mb-4" />
              <p className="text-muted-foreground">Ch∆∞a c√≥ th√¥ng tin h·ªçc v·∫•n n√†o. H√£y th√™m tr√¨nh ƒë·ªô h·ªçc v·∫•n c·ªßa b·∫°n!</p>
            </div>
          </CardContent>
        </Card>
      )}

      {fields.length > 0 && (
        <div>
          <div
            className="mb-4 p-3 rounded-lg"
            style={{
              backgroundColor: "color-mix(in srgb, var(--muted) 50%, transparent)",
              border: "2px dashed color-mix(in srgb, var(--muted-foreground) 20%, transparent)",
            }}
          >
            <p className="text-sm text-muted-foreground text-center">üí° K√©o v√† th·∫£ ƒë·ªÉ s·∫Øp x·∫øp l·∫°i th·ª© t·ª± h·ªçc v·∫•n</p>
          </div>
          <DragDropList
            items={fields}
            onReorder={handleReorder}
            renderItem={renderEducationItem}
            keyExtractor={(field) => field.id}
          />
        </div>
      )}
    </div>
  )
}
